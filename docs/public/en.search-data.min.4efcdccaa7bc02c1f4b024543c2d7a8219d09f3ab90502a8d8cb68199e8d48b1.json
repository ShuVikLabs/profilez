[{"id":0,"href":"/docs/","title":"Profilez Documentation","section":"Profilez Documentation","content":" Profilez — Verified Biodata Platform # A modern biodata website that starts simple (host a candidate\u0026rsquo;s biodata at a shareable URL) and evolves into a verified, AI-assisted talent platform.\nTech Stack # Backend: Java 21, Spring Boot 3.5.5 Frontend: React 19.1.1 Core Idea # Profilez is designed to evolve through multiple phases:\nMVP → One candidate profile, public URL, simple text + formatting. Scale → Multiple candidates, fuzzy search, recruiter registration, subscriptions. Verification → Online assessments/interviews to unlock Verified badges. AI Search → From keyword queries to intent-driven candidate discovery. Monetization → Paid themes, premium visibility, recruiter subscriptions. Repository Structure # profilez/ ├─ backend/ # Java 21 + Spring Boot 3.5.5 ├─ frontend/ # React 19.1.1 ├─ docs/ # Hugo documentation site └─ README.md Quick Navigation # Getting Started - Setup and run locally Architecture - System design and data models API Reference - REST API endpoints Roadmap - Development phases and features "},{"id":1,"href":"/docs/getting-started/","title":"Getting Started","section":"Profilez Documentation","content":" Getting Started # This guide will help you set up Profilez locally for development.\nPrerequisites # Before you begin, ensure you have the following installed:\nJava 21 - Required for the backend Node.js ≥ 18 - Required for the frontend Maven (or Gradle) - For building the backend Local Development Setup # Backend Setup # Navigate to the backend directory:\ncd backend Run the Spring Boot application:\n./mvnw spring-boot:run # or ./gradlew bootRun The backend will be available at: http://localhost:8080\nFrontend Setup # Navigate to the frontend directory:\ncd frontend Install dependencies:\nnpm install Start the development server:\nnpm run dev The frontend will be available at: http://localhost:5173\nVerification # Once both services are running:\nOpen your browser to http://localhost:5173 Check that the frontend can communicate with the backend Visit http://localhost:8080/health to verify the backend health check Next Steps # Explore the Architecture to understand the system design Check out the API Reference for available endpoints Review the Roadmap to see what\u0026rsquo;s planned "},{"id":2,"href":"/docs/architecture/","title":"Architecture","section":"Profilez Documentation","content":" Architecture # System Overview # Profilez is built as a modern, scalable web application with a clear separation between frontend and backend services.\nTechnology Stack # Backend: Java 21 with Spring Boot 3.5.5 Frontend: React 19.1.1 with modern JavaScript Build Tools: Maven/Gradle for backend, npm for frontend Data Model # The data model evolves with each phase of development:\nMVP Phase # Candidate Entity\nid - Unique identifier slug - URL-friendly identifier for public profiles fullName - Candidate\u0026rsquo;s full name headline - Professional headline summary - Professional summary links - Social media and portfolio links Later Phases # Experience Entity\ncompany - Company name title - Job title dates - Employment period highlights - Key achievements Project Entity\nname - Project name description - Project description tech - Technologies used links - Project links (GitHub, live demo, etc.) Skill Entity\nname - Skill name level - Proficiency level years - Years of experience Additional Entities (Future)\nRecruiter - Recruiter profiles and authentication Subscription - Recruiter subscription management Assessment - Online assessment system VerificationBadge - Verification status and badges Frontend Architecture # React Application Structure # The React frontend is organized into logical pages and components:\nKey Pages:\nProfileEditor - Candidate profile creation and editing interface PublicProfile - Shareable biodata display page SearchPage - Recruiter search interface RecruiterDashboard - Recruiter management tools Component Organization:\nReusable UI components Form components for data entry Display components for public profiles Search and filter components Backend Architecture # Spring Boot Modules # The backend is organized into distinct modules:\nCore Modules:\nCandidate Management - CRUD operations for candidate profiles Search Engine - Fuzzy and semantic search capabilities Verification System - Assessment and badge management Notification Service - Email and webhook notifications API Design:\nRESTful endpoints following REST conventions Clear separation of concerns Comprehensive error handling Input validation and sanitization Deployment Architecture # Development Environment # Local development with hot reloading Frontend: Vite development server Backend: Spring Boot DevTools Production Environment # Frontend: Static site deployment (Netlify, Vercel) Backend: Container deployment (Docker, Kubernetes) Database: PostgreSQL or similar RDBMS CDN: Static asset delivery Security Considerations # Input validation and sanitization CORS configuration for cross-origin requests Authentication and authorization (future phases) Data privacy and GDPR compliance Secure API endpoints with rate limiting "},{"id":3,"href":"/docs/api/","title":"API Reference","section":"Profilez Documentation","content":" API Reference # Base URL # All API endpoints are prefixed with /api/v1\nAuthentication # Currently, the MVP phase does not require authentication. Future phases will implement:\nJWT-based authentication Role-based access control (RBAC) API key management for recruiters MVP Endpoints # Health Check # GET /health # Check the health status of the backend service.\nResponse:\n{ \u0026#34;status\u0026#34;: \u0026#34;UP\u0026#34;, \u0026#34;timestamp\u0026#34;: \u0026#34;2024-01-01T12:00:00Z\u0026#34; } Candidates # POST /candidates # Create a new candidate profile.\nRequest Body:\n{ \u0026#34;fullName\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;headline\u0026#34;: \u0026#34;Senior Software Engineer\u0026#34;, \u0026#34;summary\u0026#34;: \u0026#34;Experienced developer with 5+ years in full-stack development\u0026#34;, \u0026#34;links\u0026#34;: { \u0026#34;linkedin\u0026#34;: \u0026#34;https://linkedin.com/in/johndoe\u0026#34;, \u0026#34;github\u0026#34;: \u0026#34;https://github.com/johndoe\u0026#34;, \u0026#34;portfolio\u0026#34;: \u0026#34;https://johndoe.dev\u0026#34; } } Response:\n{ \u0026#34;id\u0026#34;: \u0026#34;123e4567-e89b-12d3-a456-426614174000\u0026#34;, \u0026#34;slug\u0026#34;: \u0026#34;john-doe\u0026#34;, \u0026#34;fullName\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;headline\u0026#34;: \u0026#34;Senior Software Engineer\u0026#34;, \u0026#34;summary\u0026#34;: \u0026#34;Experienced developer with 5+ years in full-stack development\u0026#34;, \u0026#34;links\u0026#34;: { \u0026#34;linkedin\u0026#34;: \u0026#34;https://linkedin.com/in/johndoe\u0026#34;, \u0026#34;github\u0026#34;: \u0026#34;https://github.com/johndoe\u0026#34;, \u0026#34;portfolio\u0026#34;: \u0026#34;https://johndoe.dev\u0026#34; }, \u0026#34;createdAt\u0026#34;: \u0026#34;2024-01-01T12:00:00Z\u0026#34;, \u0026#34;updatedAt\u0026#34;: \u0026#34;2024-01-01T12:00:00Z\u0026#34; } PUT /candidates/{id} # Update an existing candidate profile.\nParameters:\nid (path) - Candidate ID Request Body: Same as POST /candidates\nResponse: Updated candidate object\nGET /candidates/{slug} # Retrieve a candidate profile by slug for public viewing.\nParameters:\nslug (path) - URL-friendly candidate identifier Response: Candidate object (same as POST response)\nFuture Endpoints # The following endpoints will be implemented in later phases:\nPhase 1 - Multi-Candidate + Search # GET /candidates # Search and filter candidates.\nQuery Parameters:\nq - Search query (fuzzy search) skills - Comma-separated list of skills experience - Minimum years of experience location - Location filter page - Page number (pagination) limit - Results per page GET /candidates/{id}/experience # Get candidate\u0026rsquo;s work experience.\nPOST /candidates/{id}/experience # Add work experience to candidate profile.\nGET /candidates/{id}/projects # Get candidate\u0026rsquo;s projects.\nPOST /candidates/{id}/projects # Add project to candidate profile.\nPhase 2 - Recruiters \u0026amp; Subscriptions # POST /recruiters/register # Register a new recruiter account.\nPOST /recruiters/login # Authenticate recruiter login.\nGET /recruiters/subscriptions # Get recruiter\u0026rsquo;s search subscriptions.\nPOST /recruiters/subscriptions # Create a new search subscription.\nPhase 3 - Verification # GET /assessments # List available assessments.\nPOST /candidates/{id}/assessments # Submit assessment results.\nGET /candidates/{id}/badges # Get verification badges for candidate.\nPhase 4 - AI Search # POST /search/semantic # Perform semantic search with natural language queries.\nRequest Body:\n{ \u0026#34;query\u0026#34;: \u0026#34;Find React developers with machine learning experience\u0026#34;, \u0026#34;filters\u0026#34;: { \u0026#34;experience_min\u0026#34;: 3, \u0026#34;location\u0026#34;: \u0026#34;Remote\u0026#34; } } Error Handling # All endpoints follow standard HTTP status codes:\n200 - Success 201 - Created 400 - Bad Request (validation errors) 401 - Unauthorized 403 - Forbidden 404 - Not Found 500 - Internal Server Error Error Response Format:\n{ \u0026#34;error\u0026#34;: { \u0026#34;code\u0026#34;: \u0026#34;VALIDATION_ERROR\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Invalid input data\u0026#34;, \u0026#34;details\u0026#34;: [ { \u0026#34;field\u0026#34;: \u0026#34;fullName\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Full name is required\u0026#34; } ] }, \u0026#34;timestamp\u0026#34;: \u0026#34;2024-01-01T12:00:00Z\u0026#34; } Rate Limiting # Future implementations will include:\nRequest rate limiting per IP/user Different limits for authenticated vs anonymous users Subscription-based rate limit tiers "},{"id":4,"href":"/docs/roadmap/","title":"Roadmap","section":"Profilez Documentation","content":" Development Roadmap # Profilez follows a phased development approach, starting with a simple MVP and evolving into a comprehensive talent platform.\nPhase 0 — Single-Candidate MVP # Status: 🚧 In Development\nGoal: Establish core functionality with minimal viable features.\nFeatures:\nSingle candidate profile creation Public biodata URL (shareable link) Simple text content with basic formatting Clean, responsive design Technical Deliverables:\nBasic Spring Boot backend with candidate CRUD React frontend with profile editor Public profile view Basic validation and error handling Success Criteria:\nA candidate can create and edit their profile Profile is accessible via public URL Mobile-friendly responsive design Phase 1 — Multi-Candidate + Fuzzy Search # Status: 📋 Planned\nGoal: Scale to support multiple candidates with search capabilities.\nFeatures:\nMultiple candidate profiles Fuzzy search functionality Basic filtering (skills, experience, location) Improved profile structure (experience, projects, skills) Technical Deliverables:\nDatabase schema expansion Search indexing implementation Enhanced API endpoints Search interface for recruiters Success Criteria:\nSupport for 100+ candidate profiles Sub-second search response times Accurate fuzzy matching for names and skills Phase 2 — Recruiters \u0026amp; Subscriptions # Status: 📋 Planned\nGoal: Introduce recruiter functionality and subscription model.\nFeatures:\nRecruiter registration and authentication Search criteria subscriptions Email notifications for new matches Basic recruiter dashboard Technical Deliverables:\nUser authentication system Role-based access control Notification service Subscription management Email integration Success Criteria:\nRecruiters can register and manage subscriptions Automated notifications work reliably Clear separation between public and recruiter features Phase 3 — Verification Pipeline # Status: 📋 Planned\nGoal: Add credibility through verification and assessments.\nFeatures:\nOnline skill assessments Video interview integration Verification badges for profiles Assessment score display Verified vs. unverified profile distinction Technical Deliverables:\nAssessment engine Video integration (WebRTC or third-party) Badge system Verification workflow Assessment analytics Success Criteria:\nCandidates can complete assessments Verification badges increase profile credibility Assessment data helps recruiters make better decisions Phase 4 — AI-Assisted Search # Status: 🔮 Future\nGoal: Transform search from keyword-based to intent-driven.\nFeatures:\nNatural language search queries Semantic understanding of requirements Intent-based candidate ranking AI-powered match suggestions Smart filtering recommendations Technical Deliverables:\nMachine learning pipeline Natural language processing Semantic search engine AI model training infrastructure Advanced analytics dashboard Success Criteria:\nRecruiters can search using natural language AI suggestions improve match quality Search results better align with recruiter intent Phase 5 — Monetization \u0026amp; Polish # Status: 🔮 Future\nGoal: Establish sustainable business model and professional polish.\nFeatures:\nPaid profile themes and templates Premium recruiter features Advanced analytics and insights Billing and subscription management Enterprise features Technical Deliverables:\nPayment processing integration Subscription billing system Premium feature gates Advanced analytics platform Enterprise-grade security and compliance Success Criteria:\nSustainable revenue model Professional user experience Enterprise-ready platform Positive user feedback and retention Development Principles # Iterative Development # Each phase builds upon the previous Regular user feedback integration Continuous improvement mindset Quality Focus # Comprehensive testing at each phase Performance optimization Security best practices Accessibility compliance Scalability # Architecture designed for growth Database optimization Caching strategies Load balancing preparation User Experience # Mobile-first design Intuitive interfaces Fast loading times Clear user journeys Timeline Estimates # Phase Estimated Duration Key Milestones Phase 0 4-6 weeks MVP launch, initial user testing Phase 1 6-8 weeks Multi-candidate support, search implementation Phase 2 8-10 weeks Recruiter platform, subscription system Phase 3 10-12 weeks Verification system, assessment integration Phase 4 12-16 weeks AI implementation, semantic search Phase 5 8-12 weeks Monetization, enterprise features Note: Timeline estimates are subject to change based on team size, complexity, and user feedback.\nContributing # We welcome contributions at any phase of development:\nCode contributions: Backend, frontend, AI/ML Design contributions: UI/UX, branding, user experience Documentation: Technical docs, user guides, API documentation Testing: Manual testing, automated testing, security testing Feedback: User experience feedback, feature suggestions For contribution guidelines, please see the main repository documentation.\n"}]