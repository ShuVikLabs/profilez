plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.openapi.generator' version '7.10.0'
	
	// Code Quality plugins
	id 'pmd'
	id 'checkstyle'
	id 'com.github.spotbugs' version '6.0.24'
	id 'jacoco'
}

group = 'com.shuviklabs'
version = '0.0.1-SNAPSHOT'
description = 'Next Gen Biodata & Candidate Search App'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	
	// OpenAPI and Swagger dependencies
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.27'
	implementation 'io.swagger.core.v3:swagger-models:2.2.27'
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// OpenAPI Code Generation Configuration
openApiGenerate {
	generatorName = "spring"
	inputSpec = "$rootDir/../api-spec/candidate-biodata-api.yaml"
	outputDir = "$buildDir/generated"
	apiPackage = "com.shuviklabs.profilez.api"
	modelPackage = "com.shuviklabs.profilez.model"
	configOptions = [
		dateLibrary: "java8",
		java8: "true",
		interfaceOnly: "true",
		skipDefaultInterface: "true",
		useBeanValidation: "true",
		performBeanValidation: "true",
		serializableModel: "true",
		useTags: "true",
		singleContentTypes: "true",
		useSpringBoot3: "true",
		documentationProvider: "springdoc"
	]
	generateModelTests = false
	generateApiTests = false
	generateModelDocumentation = false
	generateApiDocumentation = false
}

// Ensure OpenAPI generation runs before compilation
compileJava.dependsOn tasks.openApiGenerate

// Add generated sources to the source sets
sourceSets {
	main {
		java {
			srcDirs += "$buildDir/generated/src/main/java"
		}
	}
}

// Clean generated code when running clean task
clean {
	delete "$buildDir/generated"
}

// ===== CODE QUALITY CONFIGURATION =====

// PMD Configuration
pmd {
	toolVersion = '7.5.0'
	ruleSetFiles = files("config/pmd/pmd-rules.xml")
	ignoreFailures = true  // Demo mode - normally false
	reportsDir = file("$buildDir/reports/pmd")
}

// Checkstyle Configuration
checkstyle {
	toolVersion = '10.12.4'
	configFile = file("config/checkstyle/checkstyle.xml")
	ignoreFailures = false
	maxWarnings = 0
	reportsDir = file("$buildDir/reports/checkstyle")
}

// SpotBugs Configuration
spotbugs {
	ignoreFailures = true  // Demo mode - normally false
	effort = 'max'
	reportLevel = 'medium'
	reportsDir = file("$buildDir/reports/spotbugs")
}

spotbugsMain {
	reports {
		html {
			required = true
			outputLocation = file("$buildDir/reports/spotbugs/main.html")
		}
		xml {
			required = true
			outputLocation = file("$buildDir/reports/spotbugs/main.xml")
		}
	}
}

// JaCoCo Configuration
jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.10 // 10% minimum coverage (demo threshold - normally 70%)
			}
		}
		rule {
			element = 'CLASS'
			excludes = [
				'*.config.*',
				'*.model.*',     // Generated models
				'*.api.*',       // Generated APIs
				'*Application'   // Main application class
			]
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.40   // 40% for individual classes (demo threshold)
			}
		}
	}
}

test.finalizedBy jacocoTestReport

// Custom task to run all quality checks
task qualityCheck {
	dependsOn pmdMain, pmdTest, checkstyleMain, checkstyleTest, spotbugsMain, jacocoTestReport
	group = 'verification'
	description = 'Runs all code quality checks'
}

// Make quality checks run before build
check.dependsOn qualityCheck
