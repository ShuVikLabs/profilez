name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  changes:
    name: Detect changed projects
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - name: Checkout (full history for reliable diffs)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Optional: show context
      - run: |
          echo "event_name=${{ github.event_name }}"
          echo "ref=${{ github.ref }}"
          echo "base_ref=${{ github.base_ref }}"
          echo "head_ref=${{ github.head_ref }}"

      - name: Paths filter
        id: filter
        uses: dorny/paths-filter@v3
        with:
          # When it's a PR, paths-filter auto-detects base/head; for pushes it compares last commit.
          # Adjust folders if your structure differs.
          filters: |
            frontend:
              - 'frontend/**'
              - 'api-spec/**'
            backend:
              - 'backend/**'
              - 'api-spec/**'
            docs:
              - 'docs/**'

      - name: Echo filter results
        run: |
          echo "frontend=${{ steps.filter.outputs.frontend }}"
          echo "backend=${{ steps.filter.outputs.backend }}"
          echo "docs=${{ steps.filter.outputs.docs }}"

  build-frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest
    needs: changes
    # On push to main -> always run
    # On PR -> run only if the filter said "true"
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: npm ci --no-cache
      
      - name: Type check
        run: npm run type-check
      
      - name: Lint check
        run: npm run lint
      
      - name: Format check
        run: npm run format:check
      
      - name: Run tests with coverage
        run: npm run test:coverage
      
      - name: Build
        run: npm run build
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: frontend/coverage
      
      - uses: actions/upload-artifact@v4
        if: success()
        with:
          name: frontend-build
          path: frontend/build

  build-backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest
    needs: changes
    # On push to main -> always run
    # On PR -> run only if the filter said "true"
    if: ${{ needs.changes.outputs.backend == 'true' }}
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
      - uses: gradle/actions/setup-gradle@v3
      
      - name: Make gradlew executable
        run: chmod +x gradlew
      
      - name: Run quality checks and build
        run: ./gradlew clean qualityCheck build --no-daemon
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: backend/build/reports/tests
      
      - name: Upload code coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage
          path: backend/build/reports/jacoco
      
      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-quality-reports
          path: |
            backend/build/reports/pmd
            backend/build/reports/checkstyle
            backend/build/reports/spotbugs
      
      - uses: actions/upload-artifact@v4
        if: success()
        with:
          name: backend-build
          path: backend/build/libs

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: changes
    # On push to main -> always run
    # On PR -> run only if the filter said "true"
    if: ${{ needs.changes.outputs.docs == 'true' }}
    defaults:
      run:
        working-directory: docs
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true
      - name: Build documentation
        run: hugo --minify
      - uses: actions/upload-artifact@v4
        if: success()
        with:
          name: docs-build
          path: docs/public

  quality-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: always()
    steps:
      - name: Check quality gate status
        run: |
          echo "## Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
            echo "✅ **Frontend**: All quality checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend**: Quality checks failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
            echo "✅ **Backend**: All quality checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Backend**: Quality checks failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Reports Available" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Test Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Linting Reports" >> $GITHUB_STEP_SUMMARY
          
          # Fail the job if any quality check failed
          if [[ "${{ needs.build-frontend.result }}" != "success" ]] || [[ "${{ needs.build-backend.result }}" != "success" ]]; then
            echo "Quality gate failed!"
            exit 1
          fi
