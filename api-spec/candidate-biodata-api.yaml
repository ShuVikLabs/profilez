openapi: 3.0.3
info:
  title: Candidate Biodata API
  description: |
    API for managing candidate profiles and biodata in the Profilez application.
    This API provides comprehensive candidate management capabilities including
    profile creation, updates, search, and document management.
  version: 1.0.0
  contact:
    name: Profilez Team
    email: team@profilez.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://api.profilez.com/v1
    description: Production server

paths:
  /candidates:
    get:
      summary: Search and list candidates
      description: Retrieve a paginated list of candidates with optional filtering and sorting
      operationId: searchCandidates
      tags:
        - Candidates
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          description: Sort field and direction (e.g., 'firstName,asc' or 'createdAt,desc')
          schema:
            type: string
            default: "createdAt,desc"
        - name: search
          in: query
          description: Search term to filter candidates by name, email, or skills
          schema:
            type: string
        - name: skills
          in: query
          description: Filter by skills (comma-separated)
          schema:
            type: string
        - name: experience
          in: query
          description: Filter by years of experience
          schema:
            type: integer
            minimum: 0
        - name: location
          in: query
          description: Filter by location
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved candidates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidatePageResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new candidate
      description: Create a new candidate profile
      operationId: createCandidate
      tags:
        - Candidates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCandidateRequest'
      responses:
        '201':
          description: Candidate created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Candidate with email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /candidates/{candidateId}:
    get:
      summary: Get candidate by ID
      description: Retrieve a specific candidate by their unique ID
      operationId: getCandidateById
      tags:
        - Candidates
      parameters:
        - name: candidateId
          in: path
          required: true
          description: Unique identifier of the candidate
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved candidate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateResponse'
        '404':
          description: Candidate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update candidate
      description: Update an existing candidate's information
      operationId: updateCandidate
      tags:
        - Candidates
      parameters:
        - name: candidateId
          in: path
          required: true
          description: Unique identifier of the candidate
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCandidateRequest'
      responses:
        '200':
          description: Candidate updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Candidate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete candidate
      description: Delete a candidate from the system
      operationId: deleteCandidate
      tags:
        - Candidates
      parameters:
        - name: candidateId
          in: path
          required: true
          description: Unique identifier of the candidate
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Candidate deleted successfully
        '404':
          description: Candidate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /candidates/{candidateId}/documents:
    post:
      summary: Upload candidate document
      description: Upload a document (resume, cover letter, etc.) for a candidate
      operationId: uploadCandidateDocument
      tags:
        - Documents
      parameters:
        - name: candidateId
          in: path
          required: true
          description: Unique identifier of the candidate
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The document file to upload
                documentType:
                  type: string
                  enum: [RESUME, COVER_LETTER, PORTFOLIO, CERTIFICATE, OTHER]
                  description: Type of document being uploaded
                description:
                  type: string
                  description: Optional description of the document
              required:
                - file
                - documentType
      responses:
        '201':
          description: Document uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '400':
          description: Invalid file or request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Candidate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: List candidate documents
      description: Retrieve all documents for a specific candidate
      operationId: getCandidateDocuments
      tags:
        - Documents
      parameters:
        - name: candidateId
          in: path
          required: true
          description: Unique identifier of the candidate
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully retrieved documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentResponse'
        '404':
          description: Candidate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /candidates/{candidateId}/documents/{documentId}:
    delete:
      summary: Delete candidate document
      description: Delete a specific document for a candidate
      operationId: deleteCandidateDocument
      tags:
        - Documents
      parameters:
        - name: candidateId
          in: path
          required: true
          description: Unique identifier of the candidate
          schema:
            type: string
            format: uuid
        - name: documentId
          in: path
          required: true
          description: Unique identifier of the document
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Document deleted successfully
        '404':
          description: Candidate or document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /candidates/{candidateId}/status:
    put:
      summary: Update candidate status
      description: Update the application status of a candidate (new endpoint to test contract enforcement)
      operationId: updateCandidateStatus
      tags:
        - Candidates
      parameters:
        - name: candidateId
          in: path
          required: true
          description: Unique identifier of the candidate
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateStatusRequest'
      responses:
        '200':
          description: Candidate status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidateResponse'
        '400':
          description: Invalid status data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Candidate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CandidateResponse:
      type: object
      required:
        - id
        - firstName
        - lastName
        - email
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the candidate
        firstName:
          type: string
          description: Candidate's first name
          example: "John"
        lastName:
          type: string
          description: Candidate's last name
          example: "Doe"
        email:
          type: string
          format: email
          description: Candidate's email address
          example: "john.doe@example.com"
        phone:
          type: string
          description: Candidate's phone number
          example: "+1-555-123-4567"
        dateOfBirth:
          type: string
          format: date
          description: Candidate's date of birth
          example: "1990-05-15"
        address:
          $ref: '#/components/schemas/Address'
        summary:
          type: string
          description: Professional summary or bio
          example: "Experienced software engineer with 5+ years in full-stack development"
        experience:
          type: integer
          description: Years of professional experience
          minimum: 0
          example: 5
        skills:
          type: array
          items:
            type: string
          description: List of candidate's skills
          example: ["Java", "Spring Boot", "React", "PostgreSQL"]
        education:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        workExperience:
          type: array
          items:
            $ref: '#/components/schemas/WorkExperience'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentResponse'
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the candidate was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the candidate was last updated

    CreateCandidateRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: Candidate's first name
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: Candidate's last name
        email:
          type: string
          format: email
          description: Candidate's email address
        phone:
          type: string
          description: Candidate's phone number
        dateOfBirth:
          type: string
          format: date
          description: Candidate's date of birth
        address:
          $ref: '#/components/schemas/Address'
        summary:
          type: string
          maxLength: 1000
          description: Professional summary or bio
        experience:
          type: integer
          minimum: 0
          description: Years of professional experience
        skills:
          type: array
          items:
            type: string
          description: List of candidate's skills
        education:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        workExperience:
          type: array
          items:
            $ref: '#/components/schemas/WorkExperience'

    UpdateCandidateRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: Candidate's first name
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: Candidate's last name
        email:
          type: string
          format: email
          description: Candidate's email address
        phone:
          type: string
          description: Candidate's phone number
        dateOfBirth:
          type: string
          format: date
          description: Candidate's date of birth
        address:
          $ref: '#/components/schemas/Address'
        summary:
          type: string
          maxLength: 1000
          description: Professional summary or bio
        experience:
          type: integer
          minimum: 0
          description: Years of professional experience
        skills:
          type: array
          items:
            type: string
          description: List of candidate's skills
        education:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        workExperience:
          type: array
          items:
            $ref: '#/components/schemas/WorkExperience'

    Address:
      type: object
      properties:
        street:
          type: string
          description: Street address
        city:
          type: string
          description: City
        state:
          type: string
          description: State or province
        postalCode:
          type: string
          description: Postal or ZIP code
        country:
          type: string
          description: Country
          example: "United States"

    Education:
      type: object
      required:
        - institution
        - degree
        - fieldOfStudy
        - graduationYear
      properties:
        institution:
          type: string
          description: Name of the educational institution
          example: "University of California, Berkeley"
        degree:
          type: string
          description: Degree obtained
          example: "Bachelor of Science"
        fieldOfStudy:
          type: string
          description: Field of study or major
          example: "Computer Science"
        graduationYear:
          type: integer
          description: Year of graduation
          example: 2018
        gpa:
          type: number
          format: float
          minimum: 0.0
          maximum: 4.0
          description: Grade Point Average

    WorkExperience:
      type: object
      required:
        - company
        - position
        - startDate
      properties:
        company:
          type: string
          description: Name of the company
          example: "Tech Corp Inc."
        position:
          type: string
          description: Job title or position
          example: "Senior Software Engineer"
        startDate:
          type: string
          format: date
          description: Start date of employment
        endDate:
          type: string
          format: date
          description: End date of employment (null if current job)
        description:
          type: string
          description: Description of responsibilities and achievements
        skills:
          type: array
          items:
            type: string
          description: Skills used in this role

    DocumentResponse:
      type: object
      required:
        - id
        - fileName
        - documentType
        - fileSize
        - uploadedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the document
        fileName:
          type: string
          description: Original name of the uploaded file
        documentType:
          type: string
          enum: [RESUME, COVER_LETTER, PORTFOLIO, CERTIFICATE, OTHER]
          description: Type of document
        description:
          type: string
          description: Optional description of the document
        fileSize:
          type: integer
          description: Size of the file in bytes
        mimeType:
          type: string
          description: MIME type of the file
          example: "application/pdf"
        downloadUrl:
          type: string
          format: uri
          description: URL to download the document
        uploadedAt:
          type: string
          format: date-time
          description: Timestamp when the document was uploaded

    CandidatePageResponse:
      type: object
      required:
        - content
        - totalElements
        - totalPages
        - size
        - number
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CandidateResponse'
          description: List of candidates in the current page
        totalElements:
          type: integer
          description: Total number of candidates across all pages
        totalPages:
          type: integer
          description: Total number of pages
        size:
          type: integer
          description: Number of items per page
        number:
          type: integer
          description: Current page number (0-based)
        first:
          type: boolean
          description: Whether this is the first page
        last:
          type: boolean
          description: Whether this is the last page

    CandidateStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [APPLIED, SCREENING, INTERVIEW_SCHEDULED, INTERVIEW_COMPLETED, OFFER_EXTENDED, HIRED, REJECTED, WITHDRAWN]
          description: New status for the candidate
        notes:
          type: string
          maxLength: 500
          description: Optional notes about the status change
        interviewDate:
          type: string
          format: date-time
          description: Interview date (required when status is INTERVIEW_SCHEDULED)

    ErrorResponse:
      type: object
      required:
        - timestamp
        - status
        - error
        - message
        - path
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the error occurred
        status:
          type: integer
          description: HTTP status code
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Error message
        path:
          type: string
          description: Request path that caused the error
        details:
          type: array
          items:
            type: string
          description: Additional error details or validation errors

tags:
  - name: Candidates
    description: Operations related to candidate management
  - name: Documents
    description: Operations related to candidate document management
